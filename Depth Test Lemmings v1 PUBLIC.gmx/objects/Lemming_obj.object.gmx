<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Lemming_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create
//
//  2016/09/30
//  @TMCicuurd12b42 &amp; @jujuadams
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Step

move_towards_point( mouse_x, mouse_y, 1 );

switch( global.mode ) {
    
    case 1: //No depth sorting
    case 4: //Juju's d3d_set_depth() method
        //Nothing else needs to happen!
    break;
    
    case 2: //GM's internal depth system
        
        //Set depth
        if( depth != -y ) depth = -y; 
        
    break;
    
    case 3: //TMCicuurd12b42's script batching
        
        //Add to draw batch so LemmingDrawController_obj will draw the lemmings
        //In this demo, the array is the height of the room
        //A more streamlined implementation could use a view relative size and position
        var _batch_index = clamp( y, 0, room_height - 1 );
        
        tmc_sb_batch_add( global.DR[ _batch_index ],   tmc_sb_draw_sprite, sprite_index, image_index, x, y );
        //Because we're batching draw calls, we don't use this instance's Draw event
       
    break;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

switch( global.mode ) {
    
    case 1: //No depth sorting
    case 2: //GM's internal depth system
        draw_self();
    break;
    
    case 3: //TMCicuurd12b42's script batching
        //No drawing needed. Handled by LemmingDrawController_obj
    break;
    
    case 4: //Juju's d3d_set_depth() method
        d3d_set_depth( -y );
        draw_self();
    break;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
